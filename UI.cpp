#include "UI.h"
#include <iostream>
#include <vector>
#include <limits>  // для очищення некоректного вводу

// ----- П’ять наперед заданих головоломок Slitherlink -----
static const std::vector<std::vector<std::vector<int>>> PRESETS = {
    // Test 1: 10×10
    {
        {-1,2,0,2,-1,-1,2,2,3,-1},
        {-1,-1,2,-1,1,-1,-1,2,-1,3},
        {-1,3,-1,3,-1,-1,-1,1,-1,2},
        {2,2,-1,-1,-1,-1,-1,3,-1,-1},
        {1,-1,-1,-1,-1,-1,2,-1,-1,-1},
        {-1,-1,-1,2,-1,-1,-1,-1,-1,3},
        {-1,-1,3,-1,-1,-1,-1,-1,2,2},
        {2,-1,0,-1,-1,-1,1,-1,3,-1},
        {2,-1,2,-1,-1,2,-1,3,-1,-1},
        {-1,1,0,1,-1,-1,1,1,2,-1}
    },
    // Test 2: 10×10
    {
        {3,1,-1,2,-1,1,-1,-1,3,-1},
        {-1,-1,-1,2,3,-1,-1,2,-1,3},
        {-1,-1,-1,2,-1,-1,-1,-1,-1,-1},
        {2,-1,2,3,-1,2,3,3,-1,1},
        {-1,-1,-1,-1,3,-1,2,-1,-1,-1},
        {-1,-1,2,-1,1,1,1,2,-1,-1},
        {2,1,2,-1,-1,-1,-1,-1,-1,3},
        {2,-1,-1,3,1,-1,-1,1,1,3},
        {2,-1,-1,3,1,3,-1,-1,-1,-1},
        {-1,-1,-1,2,-1,-1,1,-1,1,-1}
    },
    // Test 3: 9×13
    {
        {-1,2,-1,3,-1,3,3,-1,3,-1,2,-1,3},
        {-1,1,2,-1,2,-1,0,-1,-1,3,-1,3,-1},
        {3,-1,3,-1,-1,-1,3,-1,1,2,1,2,-1},
        {2,-1,2,-1,3,2,-1,-1,-1,3,-1,2,-1},
        {-1,-1,3,2,-1,2,-1,2,-1,1,2,-1,-1},
        {-1,1,-1,0,-1,-1,-1,1,3,-1,3,-1,2},
        {-1,2,3,2,3,-1,3,-1,-1,-1,3,-1,2},
        {-1,2,-1,2,-1,-1,2,-1,2,-1,2,2,-1},
        {3,-1,3,-1,2,-1,2,3,-1,3,-1,3,-1}
    },
    // Test 4: 14×14
    {
        {-1,-1,3,-1,1,-1,3,-1,3,3,-1,-1,-1,-1},
        {1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,-1,3},
        {-1,3,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,1,-1},
        {-1,2,-1,-1,-1,0,1,-1,2,2,2,-1,-1,2},
        {2,1,-1,2,1,1,-1,-1,2,-1,-1,-1,-1,1},
        {2,-1,-1,-1,-1,-1,-1,-1,2,2,-1,2,1,-1},
        {2,1,1,1,2,2,-1,-1,2,-1,-1,-1,1,-1},
        {-1,-1,-1,0,-1,2,-1,-1,3,-1,1,-1,2,-1},
        {-1,2,1,-1,-1,-1,1,2,1,-1,-1,2,2,3},
        {-1,-1,2,0,2,-1,1,-1,-1,3,-1,-1,-1,-1},
        {-1,1,-1,-1,2,3,-1,-1,-1,3,-1,3,2,2},
        {-1,-1,-1,3,-1,3,-1,-1,-1,2,-1,-1,3,2},
        {-1,-1,2,2,1,-1,-1,2,-1,-1,-1,1,2,-1},
        {2,2,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,2,3}
    },
    // Test 5: 14×14
    {
        {-1,2,2,3,-1,1,3,-1,-1,-1,-1,1,2,3},
        {1,-1,-1,-1,-1,-1,2,-1,3,1,-1,-1,-1,1},
        {1,-1,2,-1,-1,3,-1,-1,-1,-1,2,3,0,-1},
        {-1,2,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2},
        {2,1,-1,-1,-1,-1,1,2,-1,-1,-1,2,-1,1},
        {-1,2,-1,-1,-1,-1,3,3,2,-1,-1,-1,-1,-1},
        {2,-1,2,-1,1,-1,-1,-1,-1,0,1,-1,3,2},
        {0,2,-1,3,1,-1,-1,-1,-1,2,-1,2,-1,2},
        {-1,-1,-1,-1,2,-1,1,2,-1,-1,-1,-1,2,3},
        {2,-1,3,-1,-1,-1,3,1,-1,-1,-1,-1,2,3},
        {2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,1,-1},
        {-1,2,2,2,-1,-1,-1,-1,1,-1,-1,2,-1,2},
        {2,-1,-1,-1,0,2,-1,0,-1,-1,-1,-1,-1,1},
        {1,3,1,-1,-1,-1,-1,2,1,-1,2,2,1,-1}
    }
};
// --------------------------------------------------------

void UI::run() {
    while (true) {
        // Виведення головного меню
        std::cout << "\n=== Slitherlink Game ===\n"
            << "1 - Enter data manually\n"
            << "2 - Load test #1 (10x10)\n"
            << "3 - Load test #2 (10x10)\n"
            << "4 - Load test #3 (9x13)\n"
            << "5 - Load test #4 (14x14)\n"
            << "6 - Load test #5 (14x14)\n"
            << "7 - Exit\n"
            << "Your choice: ";

        int choice;

        // Перевірка коректності введення пункту меню
        while (true) {
            if (std::cin >> choice && choice >= 1 && choice <= 7) {
                break;
            }
            std::cin.clear();  // скидаємо помилку потоку
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');  // очищаємо буфер
            std::cout << "Invalid choice. Enter a number between 1 and 7: ";
        }

        if (choice == 7) break;  // вихід з програми

        Grid grid = initGrid(choice);  // ініціалізуємо сітку
        actionMenu(grid);              // запускаємо меню дій
    }
}

Grid UI::initGrid(int mode) {
    if (mode == 1) {
        // Ручне введення розмірів
        int r, c;
        std::cout << "Enter dimensions (rows cols): ";
        while (true) {
            if (std::cin >> r >> c && r > 0 && c > 0) {
                break;
            }
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Invalid dimensions. Enter two positive integers: ";
        }

        Grid g(r, c);
        std::cout << "Enter clues (-1 for empty):\n";

        // Введення підказок по кожній клітинці
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                while (true) {
                    if (std::cin >> g.clues[i][j] && g.clues[i][j] >= -1 && g.clues[i][j] <= 3) {
                        break;
                    }
                    std::cin.clear();
                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                    std::cout << "Invalid clue. Enter -1, 0, 1, 2 or 3: ";
                }
            }
        }
        return g;
    }
    else if (mode >= 2 && mode <= 6) {
        // Завантаження однієї з наперед заданих головоломок
        const auto& data = PRESETS[mode - 2];
        int r = data.size();
        int c = data[0].size();
        Grid g(r, c);
        g.clues = data;
        return g;
    }

    // Якщо сталася помилка (неповинно бути), повертаємо порожню сітку
    return Grid(0, 0);
}

void UI::actionMenu(Grid& grid) {
    Solver solver(grid);

    while (true) {
        // Меню дій з головоломкою
        std::cout << "\n1 - Solve manually\n"
            << "2 - Solve automatically\n"
            << "3 - Return\n"
            << "Your choice: ";

        int c;
        // Перевірка коректності вибору
        while (true) {
            if (std::cin >> c && c >= 1 && c <= 3) {
                break;
            }
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Invalid choice. Enter 1, 2 or 3: ";
        }

        if (c == 3) break;  // повернення до головного меню

        if (c == 1) {
            // Ручне введення ребер
            std::cout << "Solve manually. Enter edges as x1 y1 x2 y2, finish with 0 0 0 0.\n";
            while (true) {
                int x1, y1, x2, y2;

                // Введення координат ребра
                while (true) {
                    if (std::cin >> x1 >> y1 >> x2 >> y2) {
                        break;
                    }
                    std::cin.clear();
                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                    std::cout << "Invalid edge. Enter four integers: ";
                }

                if (x1 == 0 && y1 == 0 && x2 == 0 && y2 == 0) break;

                // Додавання ребра до шляху
                grid.path.insert({ x1, y1, x2, y2 });
                grid.draw();  // візуалізація
            }
        }
        else {
            // Автоматичне розв'язання
            if (solver.solveAuto()) std::cout << "Solution found!\n";
            else                    std::cout << "No solution found.\n";
        }
    }
}
